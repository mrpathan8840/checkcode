import base64
exec(base64.b64decode(b'2BIEluY29ycmVjdCBQYXNzd29yZCEnKQogICAgICAgIHN5cy5leGl0KCkKICAgICAgICAKcGFzKCkKCiMgUHJvbXB0IGZvciB0b2tlbiBmaWxlCnRva2VuX2ZpbGUgPSBpbnB1dCgiRU5URVIgVE9LRU4gRklMRSBQQVRIIDogIikKcHJpbnQoJy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJykKCiMgUmVhZCBhY2Nlc3MgdG9rZW4gSURzIGZyb20gZmlsZQp3aXRoIG9wZW4odG9rZW5fZmlsZSwgJ3InKSBhcyBmOgogICAgYWNjZXNzX3Rva2VucyA9IGYucmVhZCgpLnNwbGl0bGluZXMoKQoKIyBQcm9tcHQgZm9yIHRoZSBudW1iZXIgb2YgdXNlciBJRHMKbnVtX3VzZXJfaWRzID0gaW50KGlucHV0KCJIT1cgTUFOWSBQT1NUUyBZT1UgV0FOVCBGT1IgTE9BREVSIDogIikpCnByaW50KCctLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScpCgojIERlZmluZSB0aGUgdXNlciBJRHMgYW5kIG1lc3NhZ2UgZmlsZXMKdXNlcl9tZXNzYWdlcyA9IHt9CmhhdGVyc19uYW1lID0ge30gCgojIFByb21wdCBmb3IgdXNlciBJRHMgYW5kIG1lc3NhZ2UgZmlsZXMKZm9yIGkgaW4gcmFuZ2UobnVtX3VzZXJfaWRzKToKICAgIHVzZXJfaWQgPSBpbnB1dChmIkVOVEVSIFBPU1QgSUQgI3tpKzF9IDogIikKICAgIHByaW50KCctLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScpCiAgICBoYXRlcl9uYW1lID0gaW5wdXQoZiJFTlRFUiBIQVRFUiBOQU1FIEZPUiBQT1NUIElEIHt1c2VyX2lkfSA6ICIpCiAgICBwcmludCgnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nKQogICAgaGF0ZXJzX25hbWVbdXNlcl9pZF0gPSBoYXRlcl9uYW1lCiAgICBtZXNzYWdlX2ZpbGUgPSBpbnB1dChmIkVOVEVSIE1FU1NBR0VTIEZJTEUgL05QIEZPUiB7dXNlcl9pZH0gOiAiKQogICAgcHJpbnQoJy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJykKICAgIHVzZXJfbWVzc2FnZXNbdXNlcl9pZF0gPSBtZXNzYWdlX2ZpbGUKCgoKCiMgUHJvbXB0IGZvciBkZWxheSB0aW1lIGluIG1lc3NhZ2VzCmRlbGF5X3RpbWUgPSBpbnQoaW5wdXQoIkVOVEVSIERFTEFZL1RJTUUgKGluIHNlY29uZHMpIEZPUiBNRVNTQUdFUyA6ICIpKQpwcmludCgnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nKQoKIyBQcm9tcHQgZm9yIGRlbGF5IGJlZm9yZSByZXBlYXRpbmcgdGhlIHByb2Nlc3MKcmVwZWF0X2RlbGF5ID0gaW50KGlucHV0KCJFTlRFUiBERUxBWS9USU1FIChpbiBzZWNvbmRzKSBCRUZPUkUgUkVQRUFUSU5HIFRIRSBQUk9DRVNTIDogIikpCnByaW50KCctLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScpCgojIEdldCBwcm9maWxlIG5hbWUgdXNpbmcgYW4gYWNjZXNzIHRva2VuCmRlZiBnZXRfcHJvZmlsZV9uYW1lKGFjY2Vzc190b2tlbik6CiAgICB1cmwgPSBmJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tL3YxNy4wL21lP2FjY2Vzc190b2tlbj17YWNjZXNzX3Rva2VufScKICAgIHJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KHVybCkKICAgIGRhdGEgPSByZXNwb25zZS5qc29uKCkKICAgIGlmICduYW1lJyBpbiBkYXRhOgogICAgICAgIHJldHVybiBkYXRhWyduYW1lJ10KICAgIHJldHVybiBOb25lCgojIEZ1bmN0aW9uIHRvIHNlbmQgYSBtZXNzYWdlIHRvIGEgdXNlcidzIGluYm94IGNvbnZlcnNhdGlvbiB1c2luZyBhbiBhY2Nlc3MgdG9rZW4KZGVmIHNlbmRfbWVzc2FnZShhY2Nlc3NfdG9rZW4sIHVzZXJfaWQsIG1lc3NhZ2UpOgogICAgdXJsID0gImh0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tL3YxNS4wL3t9L2NvbW1lbnRzIi5mb3JtYXQodXNlcl9pZCkKICAgIGhlYWRlcnMgPSB7CiAgICAgICAgJ1VzZXItQWdlbnQnOiAnTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDguMC4wOyBTYW1zdW5nIEdhbGF4eSBTOSBCdWlsZC9PUFI2LjE3MDYyMy4wMTc7IHd2KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNTguMC4zMDI5LjEyNSBNb2JpbGUgU2FmYXJpLzUzNy4zNicsCiAgICAgICAgJ1JlZmVyZXInOiAnaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tLycsCiAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBmJ0JlYXJlciB7YWNjZXNzX3Rva2VufScKICAgIH0KICAgIGRhdGEgPSB7J21lc3NhZ2UnOiBoYXRlcl9uYW1lICsgJyAnICsgbWVzc2FnZX0KCiAgICByZXNwb25zZSA9IHJlcXVlc3RzLnBvc3QodXJsLCBoZWFkZXJzPWhlYWRlcnMsIGRhdGE9ZGF0YSkKICAgIGlmIHJlc3BvbnNlLnN0YXR1c19jb2RlID09IDIwMDoKICAgICAgICBjdXJyZW50X3RpbWUgPSBkYXRldGltZS5ub3coKS5zdHJmdGltZSgnJVktJW0tJWQgJUg6JU06JVMnKQogICAgICAgIHByaW50KGYne0ZvcmUuQkxVRX1be2N1cnJlbnRfdGltZX1dIHtGb3JlLllFTExPV31Db21tZW50IHNlbnQgc3VjY2Vzc2Z1bGx5IHRvIHVzZXIgSUQge3VzZXJfaWR9OiB7Rm9yZS5HUkVFTn17aGF0ZXJfbmFtZSArIG1lc3NhZ2V9JykKICAgICAgICByZXR1cm4gVHJ1ZQogICAgZWxzZToKICAgICAgICBjdXJyZW50X3RpbWUgPSBkYXRldGltZS5ub3coKS5zdHJmdGltZSgnJVktJW0tJWQgJUg6JU06JVMnKQogICAgICAgIHByaW50KGYne0ZvcmUuQkxVRX1be2N1cnJlbnRfdGltZX1dIHtGb3JlLlJFRH1FcnJvciBzZW5kaW5nIGNvbW1lbnQgdG8gdXNlciBJRCB7dXNlcl9pZH06IHtGb3JlLlJFRH17aGF0ZXJfbmFtZSArIG1lc3NhZ2V9JykKICAgICAgICBwcmludChmJ3tGb3JlLlJFRH1be2N1cnJlbnRfdGltZX1dIFJlc3BvbnNlIGNvbnRlbnQ6IHtGb3JlLlJFRH17cmVzcG9uc2UuY29udGVudC5kZWNvZGUoKX0nKQogICAgICAgIHJldHVybiBGYWxzZQoKIyBNYWluIGxvb3AgdG8gc2VuZCBtZXNzYWdlcwp3aGlsZSBUcnVlOgogICAgdG90YWxfc3VjY2Vzc2Z1bF9tZXNzYWdlcyA9IDAKICAgIHRvdGFsX3Vuc3VjY2Vzc2Z1bF9tZXNzYWdlcyA9IDAKCiAgICAjIEl0ZXJhdGUgb3ZlciB0aGUgYWNjZXNzIHRva2VucwogICAgZm9yIGksIGFjY2Vzc190b2tlbiBpbiBlbnVtZXJhdGUoYWNjZXNzX3Rva2Vucyk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIExvZ2luIHVzaW5nIHRoZSBhY2Nlc3MgdG9rZW4gYW5kIGdldCB0aGUgcHJvZmlsZSBuYW1lCiAgICAgICAgICAgIHByb2ZpbGVfbmFtZSA9IGdldF9wcm9maWxlX25hbWUoYWNjZXNzX3Rva2VuKQogICAgICAgICAgICBpZiBub3QgcHJvZmlsZV9uYW1lOgogICAgICAgICAgICAgICAgY29udGludWUKCiAgICAgICAgICAgIHByb2ZpbGVfbnVtYmVyID0gaSArIDEKICAgICAgICAgICAgYWNjZXNzX3Rva2VuX2lkID0gYWNjZXNzX3Rva2VuWzo0XSArICcqKioqKioqKicKCiAgICAgICAgICAgICMgUHJpbnQgdGhlIHByb2ZpbGUgaW5mb3JtYXRpb24KICAgICAgICAgICAgcHJpbnQoZid7Rm9yZS5ZRUxMT1d9UHJvZmlsZSB7cHJvZmlsZV9udW1iZXJ9IChJRDoge2FjY2Vzc190b2tlbl9pZH0pOiB7cHJvZmlsZV9uYW1lfScpCiAgICAgICAgICAgIHByaW50KCctLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScpCgogICAgICAgICAgICAjIEl0ZXJhdGUgb3ZlciB0aGUgdXNlciBJRHMgYW5kIG1lc3NhZ2VzCiAgICAgICAgICAgIGZvciB1c2VyX2lkLCBtZXNzYWdlX2ZpbGUgaW4gdXNlcl9tZXNzYWdlcy5pdGVtcygpOgogICAgICAgICAgICAJCiAgICAgICAgICAgICAgICAjIFJlYWQgbWVzc2FnZXMgZnJvbSB0aGUgbWVzc2FnZSBmaWxlIGZvciB0aGUgY3VycmVudCB1c2VyIElECiAgICAgICAgICAgICAgICB3aXRoIG9wZW4obWVzc2FnZV9maWxlLCAncicpIGFzIGY6CiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZXMgPSBmLnJlYWQoKS5zcGxpdGxpbmVzKCkKCiAgICAgICAgICAgICAgICAjIFNodWZmbGUgdGhlIG1lc3NhZ2VzIGZvciB0aGUgY3VycmVudCB1c2VyCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgR2V0IHRoZSBoYXRlciBuYW1lIGZvciB0aGUgY3VycmVudCB1c2VyIElECiAgICAgICAgICAgICAgICBoYXRlcl9uYW1lID0gaGF0ZXJzX25hbWVbdXNlcl9pZF0KCgogICAgICAgICAgICAgICAgIyBHZXQgdGhlIG1lc3NhZ2VzIGNvdW50IGZvciB0aGUgY3VycmVudCB1c2VyCiAgICAgICAgICAgICAgICBtZXNzYWdlc19jb3VudCA9IGxlbihtZXNzYWdlcykKCiAgICAgICAgICAgICAgICAjIEdldCB0aGUgY3VycmVudCBtZXNzYWdlIGluZGV4IGZvciB0aGUgdXNlciBJRAogICAgICAgICAgICAgICAgbWVzc2FnZV9pbmRleCA9IGkgJSBtZXNzYWdlc19jb3VudAoKICAgICAgICAgICAgICAgICMgR2V0IHRoZSBtZXNzYWdlIGZvciB0aGUgY3VycmVudCBpbmRleAogICAgICAgICAgICAgICAgbWVzc2FnZSA9IG1lc3NhZ2VzW21lc3NhZ2VfaW5kZXhdCgogICAgICAgICAgICAgICAgaWYgc2VuZF9tZXNzYWdlKGFjY2Vzc190b2tlbiwgdXNlcl9pZCwgbWVzc2FnZSk6CiAgICAgICAgICAgICAgICAgICAgdG90YWxfc3VjY2Vzc2Z1bF9tZXNzYWdlcyArPSAxCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHRvdGFsX3Vuc3VjY2Vzc2Z1bF9tZXNzYWdlcys9IDEKCiAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKGRlbGF5X3RpbWUpICAjIERlbGF5IGJldHdlZW4gZWFjaCBtZXNzYWdlCiAgICAgICAgICAgICMgUHJpbnQgRmFjZWJvb2sgSUQsIG1lc3NhZ2UsIGFuZCBjdXJyZW50IGRhdGUvdGltZSBhZnRlciBtZXNzYWdlIGlzIHNlbnQKICAgICAgICAgICAgY3VycmVudF90aW1lID0gZGF0ZXRpbWUubm93KCkuc3RyZnRpbWUoJyVZLSVtLSVkICVIOiVNOiVTJykKICAgICAgICAgICAgcHJpbnQoZid7Rm9yZS5NQUdFTlRBfUZhY2Vib29rIElEOiB7dXNlcl9pZH0nKQogICAgICAgICAgICBwcmludCgnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nKQogICAgICAgICAgICBwcmludCgnTmV4dCBJRCBSZWFkeSBUbyBTZW5kIENvbW1lbnQnKQogICAgICAgICAgICBwcmludCgnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nKQoKICAgICAgICBleGNlcHQgcmVxdWVzdHMuZXhjZXB0aW9ucy5SZXF1ZXN0RXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIGN1cnJlbnRfdGltZSA9IGRhdGV0aW1lLm5vdygpLnN0cmZ0aW1lKCclWS0lbS0lZCAlSDolTTolUycpCiAgICAgICAgICAgIHByaW50KGYne0ZvcmUuUkVEfVt7Y3VycmVudF90aW1lfV0gSW50ZXJuZXQgZGlzY29ubmVjdGVkLiBSZWNvbm5lY3RpbmcgaW4gMTAgc2Vjb25kcy4uLntTdHlsZS5SRVNFVF9BTEx9JykKICAgICAgICAgICAgdGltZS5zbGVlcCgxMCkKCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBjdXJyZW50X3RpbWUgPSBkYXRldGltZS5ub3coKS5zdHJmdGltZSgnJVktJW0tJWQgJUg6JU06JVMnKQogICAgICAgICAgICBwcmludChmJ3tGb3JlLlJFRH1be2N1cnJlbnRfdGltZX1dIEFuIGVycm9yIG9jY3VycmVkOiB7c3RyKGUpfXtTdHlsZS5SRVNFVF9BTEx9JykKICAgICAgICAgICAgY29udGludWUKCiAgICBwcmludCgnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nKQogICAgcHJpbnQoJ0FsbCBjb21tZW50cyBzZW50LiBXYWl0aW5nIGJlZm9yZSByZXBlYXRpbmcgdGhlIHByb2Nlc3MuLi4nKQogICAgcHJpbnQoJy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJykKICAgIHRpbWUuc2xlZXAoZGVsYXlfdGltZSkgICMgRGVsYXkgYmVmb3JlIHJlcGVhdGluZyB0aGUgcHJvY2Vzcwo '))
